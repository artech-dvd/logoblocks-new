;;;; OBJECTS for the VPL;;;; Albert Castillo May 1995;;;; Andrew Begel 4/6/95;--------------- CLASS DEFINITIONS ------------------------------------(defclass object ()  ((name :accessor name :initarg :name)   (boundrect :initarg :boundrect :accessor boundrect)   (boundrgn :initarg :boundrgn :accessor boundrgn)   ;(clprgn :initarg :clprgn :accessor clprgn)   (hilitergn :initarg :hilitergn :accessor hilitergn :initform nil)))(defclass action (object)  ((definition :initarg :definition :accessor definition)   (color-list :initarg :color-list :accessor color-list)))(defclass trigger (object)  ((definition :initarg :definition :accessor definition)   (color-list :initarg :color-list :accessor color-list))); toggle class for "on" "off" and "toggle"(defclass onoff (action)  ()); toggle class for "wait 1" "wait 5" and "wait 10"(defclass wait (action)  ()); toggle class for motors "a", "b", "c", "d"(defclass motor (action)  ()); toggle class for directions "thisway" "thatway" and "rd"(defclass direction (action)  ()); toggle class for switches "a", "b", "c"(defclass switch (trigger)  ());--------------- OBJECT METHODS ---------------------------------------(defmethod move-object ((obj object) new-location)  (let ((diff-loc (subtract-points new-location (topleft (boundrect obj)))))    (offset-rect (boundrect obj) diff-loc)    (offset-region (boundrgn obj) diff-loc)))(defmethod delete-object ((obj object))  (dispose-region (boundrgn obj))  (dispose-record (boundrect obj))  ;(dispose-region (clprgn obj))  (if (hilitergn obj) (dispose-region (hilitergn obj))))(defmethod copy-obj ((obj object))  (case (class-name (class-of obj))    (action (make-action-box (name obj) (color-list obj) (definition obj)                             (topleft (boundrect obj))))    (trigger (make-trigger (name obj) (color-list obj) (definition obj)                           (topleft (boundrect obj)))))); label the object with its name(defmethod draw-object :after ((obj object) grafport)  (let ((therect (boundrect obj)))    (offscreen grafport               (#_moveto                 ; center it horizontally                (+ (left therect)                   (floor (/ (- (right therect) (left therect) (string-width (string (name obj)))) 2)))                (- (bottom (boundrect obj)) 8))             (grafport-write-string (string (name obj)) 0 10))))  (defmethod toggle ((obj object))  ());--------------- ACTION OBJECT -----------------------------------------(defun make-action-box (name color-list definition location)  (let ((boundrgn (new-region)))    (rlet ((boundrect :rect :topleft #@(0 0) :botright #@(50 25)))      (move-rect boundrect location)      (#_OpenRgn)      (draw-action-box boundrect color-list)      (#_closergn boundrgn)            (let ((action-box             (make-instance (pick-action-type name)               :name name               :definition definition               :color-list color-list               :boundrect (copy-rect boundrect)               :boundrgn (copy-region boundrgn)                ;:clprgn (copy-region boundrgn)               )))        (dispose-region boundrgn)        action-box))))(defun pick-action-type (name)  (case name    ((on off toggle) 'onoff)    (wait 'wait)    (a 'motor)    (rd 'direction)    (t 'action)))(defmethod draw-object ((obj action) grafport)  (offscreen grafport              (draw-action-box (boundrect obj) (color-list obj))))(defun draw-action-box (boundrect color-list)  (with-fore-color color-list    (#_paintroundrect boundrect 15 15))  (#_pennormal)  (#_frameroundrect boundrect 15 15))(defmethod erase-object ((obj action) grafport)  (offscreen grafport              (erase-action-box (boundrect obj))))(defun erase-action-box (boundrect)  (#_eraseroundrect boundrect 15 15))(defmethod toggle ((obj onoff))  (#_sysbeep 10)  (case (name obj)    (toggle (setf (name obj) 'on)         (setf (color-list obj) *green-color*)         (setf (definition obj) '<on>))    (on (setf (name obj) 'off)        (setf (color-list obj) *red-color*)        (setf (definition obj) '<off>))    (off (setf (name obj) 'toggle)         (setf (color-list obj) *purple-color*)         (setf (definition obj) '<toggle>))))  (defmethod toggle ((obj wait))  (#_sysbeep 10)  (case (name obj)    (wait (setf (name obj) 'wait.1)          (setf (definition obj) (list '<%num> 0 1 '<wait>)))    (wait.1 (setf (name obj) 'wait.5)            (setf (definition obj) (list '<%num> 0 5 '<wait>)))    (wait.5 (setf (name obj) 'wait5)            (setf (definition obj) (list '<%num> 0 50 '<wait>)))    (wait5 (setf (name obj) 'wait10)           (setf (definition obj) (list '<%num> 0 100 '<wait>)))    (wait10 (setf (name obj) 'wait)            (setf (definition obj) '(list '<%num> 0 10 '<wait>)))))(defmethod toggle ((obj motor))  (#_sysbeep 10)  (case (name obj)    (a (setf (name obj) 'b)       (setf (definition obj) '<b>))    (b (setf (name obj) 'c)       (setf (definition obj) '<c>))    (c (setf (name obj) 'd)       (setf (definition obj) '<d>))    (d (setf (name obj) 'ab)       (setf (definition obj) '<ab>))    (ab (setf (name obj) 'ac)        (setf (definition obj) '<ac>))    (ac (setf (name obj) 'bc)        (setf (definition obj) '<bc>))    (bc (setf (name obj) 'abcd)        (setf (definition obj) '<abcd>))    (abcd (setf (name obj) 'a)          (setf (definition obj) '<a>))))(defmethod toggle ((obj direction))  (#_sysbeep 10)  (case (name obj)    (rd (setf (name obj) 'thisway)        (setf (definition obj) '<thisway>))    (thisway (setf (name obj) 'thatway)             (setf (definition obj) '<thatway>))    (thatway (setf (name obj) 'rd)             (setf (definition obj) '<rd>))));--------------- TRIGGER OBJECT -----------------------------------------(defun make-trigger (name color-list definition location)  (let ((boundrgn (new-region)))    (rlet ((boundrect :rect :topleft #@(0 0) :botright #@(50 25)))      (move-rect boundrect location)      (#_OpenRgn)      (draw-trigger boundrect color-list)      (#_CloseRgn boundrgn)      (let ((trigger             (make-instance (pick-trigger-type name)                :name name               :definition definition               :color-list color-list               :boundrect (copy-rect boundrect)               :boundrgn (copy-region boundrgn)                ;:clprgn (copy-region boundrgn)               )))        (dispose-region boundrgn)        trigger))))(defun pick-trigger-type (name)  (case name    (switch 'switch)    (t 'trigger)))(defmethod draw-object ((obj trigger) grafport)  (offscreen grafport              (draw-trigger (boundrect obj) (color-list obj))))(defun draw-trigger (boundrect color-list)  (with-fore-color color-list    (#_paintoval boundrect))  (#_pennormal)  (#_frameoval boundrect))(defmethod erase-object ((obj trigger) grafport)  (offscreen grafport              (erase-trigger (boundrect obj))))(defun erase-trigger (boundrect)  (#_eraseoval boundrect))(defmethod toggle ((obj switch))  (#_sysbeep 10)  (case (name obj)    (switch (setf (name obj) 'switchb)            (setf (definition obj) '<switchb>))    (switchb (setf (name obj) 'switchc)             (setf (definition obj) '<switchc>))    (switchc (setf (name obj) 'switch)             (setf (definition obj) '<switcha>))))       ;;;