;;; CLASS Library;---------- CLASS DEFINITIONS --------------------------------(defclass vpl-mixin ()  ;identifier class  ())(defclass interface-window (window vpl-mixin)  ());; this offscreen buffer is used to hold the whole view;; during object-move ops it may be modified(defclass vpl-view (view vpl-mixin)  ())(defclass interface-view (vpl-view)  ((current-page :accessor page :initarg :page :initform nil)   (page-list :accessor page-list :initarg :page-list :initform nil)   (grid-space-x :accessor grid-space-x :initarg :grid-space-x :initform 1)   (grid-space-y :accessor grid-space-y :initarg :grid-space-y :initform 1)))(defclass page ()  ((object-list :accessor object-list :initform nil :initarg :objects)   (page-container :accessor page-container :initform nil :initarg :page-container)))(defclass background-view (vpl-view)  ((buffer1 :initarg :buffer1 :Accessor buffer1)   (buffer2 :initarg :buffer2 :accessor buffer2)))(defclass background (background-view)  ((main-screen :initarg :main :accessor main)   (palette :initarg :palette :accessor palette)))(defclass main (interface-view)  ())(defclass palette (interface-view)  ());--------------- CLASS DEFINITIONS ------------------------------------(defclass object (vpl-mixin)  ((name :accessor name :initarg :name)   (boundrect :initarg :boundrect :accessor boundrect)   (boundrgn :initarg :boundrgn :accessor boundrgn)   (palette? :initarg :palette? :accessor palette? :initform nil)   (definition :initarg :definition :accessor definition)   (currentdef :initarg :currentdef :accessor currentdef)   (color-list :initarg :color-list :accessor color-list)   (touch-list :accessor touch-list :initform nil)   (selected? :accessor selected? :initform nil)   (bot-target :initarg :bot-target :accessor bot-target :initform #@(0 26))   (right-target :initarg :right-target :accessor right-target :initform #@(49 0))   (left-target :initarg :left-target :accessor left-target :initform #@(-49 0))   (top-target :initarg :top-target :accessor top-target :initform #@(0 -26))   (right-repeat-target :initarg :right-repeat-target :accessor right-repeat-target                        :initform #@(49 -14))   (top-repeat-target :initarg :top-repeat-target :Accessor top-repeat-target                      :initform #@(0 -55))   (left-proc-target :initarg :left-proc-target :accessor left-proc-target                     :initform #@(-31 0))   (top-proc-target :initarg :top-proc-target :accessor top-proc-target                    :initform #@(9 -25))   (bot-proc-target :initarg :bot-proc-target :accessor bot-proc-target                    :initform #@(9 26))   (bot-repeat-target :initarg :bot-repeat-target :Accessor bot-repeat-target)   (left-func-target :initarg :left-func-target :accessor left-func-target)))(defclass action (object)  ((num-target :initarg :num-target :accessor num-target)))(defclass sensor (object)  ())(defclass variable (object)  ())(defclass proc (object)  ((current-pict :initarg :current-pict :accessor current-pict)   (proc-name :initarg :proc-name :accessor proc-name)   (define? :initarg :define? :accessor define?)   (top-action-target :initarg :top-action-target :accessor top-action-target)))(defclass action-input (action)  ((orientation :initarg :orient :initform 'right :accessor orient)   (right-num-target :initarg :right-num-target :accessor right-num-target)))(defclass action-2input (action)  ((func-target :initarg :func-target :accessor func-target)))(defclass repeat (action-2input)  ())(defclass digital (sensor)  ())(defclass analog (sensor)  ((relation :initform '(< > <= >= =) :initarg :relation :accessor relation)   (currentrel :initform '< :initarg :currentrel :accessor currentrel)   (num-target :initarg :num-target :accessor num-target)))(defclass edge ()  ((boundrect :initarg :boundrect :accessor boundrect)   (sensor-value :initarg :sensor-value :accessor sensor-value)))(defclass road (analog)  ((up-edge-list :initform nil :accessor up-edge-list)   (up-zone-list :initform nil :initarg :up-zone-list :accessor up-zone-list)   (down-edge-list :initform nil :accessor down-edge-list)   (down-zone-list :initform nil :initarg :down-zone-list :accessor down-zone-list)   (middle-rect :initarg :middle-rect :accessor middle-rect)))(defclass number-var (variable)  ((orientation :initarg :orient :initform 'left :accessor orient)   (left-num-target :initarg :left-num-target :accessor left-num-target)   (right-num-target :initarg :right-num-target :accessor right-num-target)   (left-repeat-target :initarg :left-repeat-target :Accessor left-repeat-target)   (right-proc-target :initarg :right-proc-target :accessor right-proc-target)))