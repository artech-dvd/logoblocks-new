(defvar procs #xc400)(defvar command-line #xfd00)(defvar menu-address #xc001)(defvar this-proc procs)(defvar proc-addresses nil)(defvar byte-codes)(setq byte-codes '(    nil <%input> nil nil nil <%num> nil    <%list> <%proc> <%tproc> <%eol> <%eolr>    <stop> <output> <make> <+> <=> <if> <repeat>     <waituntil> <send> <resett> <timer> <wait>     <db> <eb> <and> <or> <dw> <ew> <-> <not> <on> <off>     <thisway> <thatway> <rd> <a> <b> <c> <d> <ab>     <ac> <bc> <toggle> <setpower> <>> <<> <switcha>     <switchb> <switchc> <switchd> <sensora> <sensorb>     <sensorc> <sensord> <sensore> <sensorf> <sensorg>     <sensorh> <countera> <counterb> <counterc> <counterd>     <resetca> <resetcb> <resetcc> <resetcd> <.type>     <.print> <type> <print> <top> <bottom> <knob>     <button> <loop> <ifelse> <launch> <forever>     <onfor> <when> <*> </> <\\> <battery> <erase>     <record> <resetr> <recall> <record#> <recall#>     <unrecord> <every> <abc> <abcd> <note> <ir>    <stoprules> <irsend> <recc> <.say> <say> <irf>))(defmacro run (&rest codes)  `(run-code (translate-all ',codes)))(defmacro proc (name args &rest codes)  `(define-one ',name (translate-all '(,args ,@codes <stop>))))(defun translate-all (list)  (loop for i in list        append (enlist (translate-one i))))(defun enlist (n)  (if (listp n) n (list n)))(defun translate-one (x)  (cond ((numberp x) x)        ((and (listp x)(eql (car x) '16bit))         (decode-word (cadr x)))        (t (* 2 (position x byte-codes)))))(defun decode-word (x)  (if (not (numberp x))    (setq x (cdr (assoc x proc-addresses))))  (list (ldb (byte 8 8) x)        (ldb (byte 8 0) x)))(defun define-one (name code)  (push (cons name this-proc) proc-addresses)  (download-code this-proc code)  (setq this-proc (+ this-proc (length code))))(defun erase1 ()  (setq this-proc procs)  (setq proc-addresses nil))(defvar brick-stream)(defun set-pointer (n)  (serial-tyo-echo (char-code #\0))  (serial-tyo-echo (ldb (byte 8 8) n))  (serial-tyo-echo (ldb (byte 8 0) n)))(defun get-byte ()   (clrtty)  (serial-tyo-echo (char-code #\1))  (serial-tyi))(defun put-byte (n)  (serial-tyo-echo (char-code #\2))  (serial-tyo-echo n))(defun run-code (list)  (set-pointer command-line)  (mapc #'put-byte list)  (put-byte (translate-one '<%eol>))  (set-pointer command-line)  (serial-tyo-echo (char-code #\3)))(defun download-code (where list)  (set-pointer where)  (mapc #'put-byte list))(defun serial-tyo-echo (n)  (serial-tyo n)  (serial-tyi))(defun serial-tyi ()(char-code (stream-tyi brick-stream)))(defun serial-tyo (c)(stream-tyo brick-stream (code-char c)))(defun clrtty () (stream-clear-input brick-stream))(defun modem-port ()  (dispose-serial)  (make-serial-a)  (setq brick-stream *serial-a*))(defun printer-port ()  (dispose-serial)  (make-serial-b)  (setq brick-stream *serial-b*))(defun dispose-serial ()  (if *serial-a* (dispose-serial-a))  (if *serial-b* (dispose-serial-b)))