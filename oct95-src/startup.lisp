;;;; STARTUP(defvar standalone? nil)(defun load-brick-logo-files ()  (require :quickdraw)  (load "home:classlib.lisp")  (load "home:res.lisp")  (require :serial-streams)  (load "home:brick-direct.lisp")  (load "home:toolbox.lisp")  (load "home:interface.lisp")  (load "home:objects.lisp")  (load "home:interpreter.lisp")  (load "home:filing.lisp"))(defun init ()  (setup)  (make-test))(defun load-brick-logo ()  (load-brick-logo-files)  (init))(defun make-application ()  (setq standalone? t        *lisp-startup-functions* '(init))  (load-brick-logo-files))  ;(save-application "bricklogo.app" :creator "BrLg"   ;                  :excise-compiler t))#| (require :cfm-mover) (defun finish-ppc-application ()  (let ((filename (catch-cancel                     (choose-file-dialog :mac-file-type :|APPL|                                        :button-string "OK"))))    (when (and filename (not (eql filename :cancel)))      (cfm-mover::merge-application-and-libraries       filename       `(,(let ((xsyms+maps (append (directory "ccl:pmcl-kernel-*.xsym")                                    (directory "ccl:pmcl-kernel-*.map"))))            (find-if-not #'(lambda (path)                             (member path xsyms+maps :test #'equal))                         (directory "ccl:pmcl-kernel-*")                         :from-end t))         ;,(car (last (directory "ccl:pmcl-compiler-*")))         ,(car (last (directory "ccl:pmcl-library-*"))))       (translate-logical-pathname "home:LogoBlocks App")       :if-exists :supersede       :verbose t))))(finish-ppc-application)|#